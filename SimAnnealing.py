import random
import math
import time

def evaluarSolucion(datos, solucion):
    longitud = 0
    for i in range(len(solucion)):
        longitud += datos[solucion[i - 1]][solucion[i]]
    return longitud

def obtenerVecino(solucion, datos):
    ##Obtención de los vecinos
    vecinos = []
    l=len(solucion)
    for i in range(l):
        for j in range(i+1, l):
            n = solucion.copy()
            n[i] = solucion[j]
            n[j] = solucion[i]
            vecinos.append(n)

    ##Obtengo un vecino aleatorio
    vecino=vecinos[random.randint(0, len(vecinos) - 1)]
    longitud = evaluarSolucion(datos, vecino)

    return vecino, longitud

def simAnnealing(datos,t0):
    t=t0
    l=len(datos)
    ##Creamos una solucion aleatoria
    ciudades = list(range(l))
    solucion = []
    for i in range(l):
        ciudad = ciudades[random.randint(0, len(ciudades) - 1)]
        solucion.append(ciudad)
        ciudades.remove(ciudad)
    longitud = evaluarSolucion(datos, solucion)
    print("Longitud de la ruta: ", longitud)
    print("Temperatura: ", t)

    it=0
    while t > 0.05:
        ##Obtenemos un vecino al azar
        vecino = obtenerVecino(solucion, datos)
        incremento = vecino[1]-longitud

        if incremento < 0:
            longitud = vecino[1]
            solucion = vecino[0]
        elif random.random() < math.exp(-abs(incremento) / t):
            longitud = vecino[1]
            solucion = vecino[0]

        it+=1
        t=0.99*t
        print("Longitud de la ruta: ", longitud)
        print("Temperatura: ", t)
    return solucion, longitud

def main():
    datos = [

[0, 219, 484, 914, 113, 704, 157, 596, 610, 490, 823, 540, 275, 44, 861, 331, 91, 597, 308, 385, 987, 880, 299, 168, 737]
,
[219, 0, 246, 143, 541, 32, 215, 298, 906, 504, 625, 257, 381, 874, 466, 583, 344, 205, 466, 842, 61, 878, 327, 751, 136]
,
[484, 246, 0, 247, 672, 290, 298, 617, 899, 729, 870, 732, 60, 735, 880, 739, 870, 913, 611, 168, 238, 975, 792, 495, 732]
,
[914, 143, 247, 0, 984, 352, 710, 729, 107, 737, 477, 52, 553, 338, 754, 777, 532, 96, 140, 267, 874, 358, 266, 384, 722]
,
[113, 541, 672, 984, 0, 927, 683, 504, 73, 838, 37, 40, 404, 69, 779, 260, 269, 185, 190, 271, 526, 353, 771, 402, 808]
,
[704, 32, 290, 352, 927, 0, 342, 828, 569, 174, 332, 407, 583, 52, 220, 665, 522, 567, 538, 994, 866, 964, 821, 383, 591]
,
[157, 215, 298, 710, 683, 342, 0, 699, 483, 155, 610, 461, 971, 452, 802, 581, 909, 830, 839, 722, 127, 776, 710, 286, 458]
,
[596, 298, 617, 729, 504, 828, 699, 0, 528, 383, 626, 827, 158, 146, 962, 128, 568, 811, 956, 896, 132, 766, 259, 199, 288]
,
[610, 906, 899, 107, 73, 569, 483, 528, 0, 420, 952, 674, 777, 434, 37, 831, 801, 770, 677, 899, 311, 241, 834, 366, 368]
,
[490, 504, 729, 737, 838, 174, 155, 383, 420, 0, 701, 489, 702, 871, 860, 191, 293, 772, 785, 682, 938, 467, 827, 206, 431]
,
[823, 625, 870, 477, 37, 332, 610, 626, 952, 701, 0, 298, 610, 505, 575, 81, 540, 709, 478, 240, 873, 681, 553, 545, 386]
,
[540, 257, 732, 52, 40, 407, 461, 827, 674, 489, 298, 0, 376, 122, 178, 480, 904, 63, 394, 336, 124, 882, 97, 217, 936]
,
[275, 381, 60, 553, 404, 583, 971, 158, 777, 702, 610, 376, 0, 478, 814, 19, 738, 289, 465, 681, 455, 339, 233, 551, 408]
,
[44, 874, 735, 338, 69, 52, 452, 146, 434, 871, 505, 122, 478, 0, 198, 146, 694, 765, 292, 850, 449, 900, 278, 913, 345]
,
[861, 466, 880, 754, 779, 220, 802, 962, 37, 860, 575, 178, 814, 198, 0, 349, 958, 376, 638, 312, 162, 263, 329, 770, 692]
,
[331, 583, 739, 777, 260, 665, 581, 128, 831, 191, 81, 480, 19, 146, 349, 0, 312, 791, 157, 372, 646, 668, 488, 967, 671]
,
[91, 344, 870, 532, 269, 522, 909, 568, 801, 293, 540, 904, 738, 694, 958, 312, 0, 957, 144, 400, 56, 470, 327, 83, 227]
,
[597, 205, 913, 96, 185, 567, 830, 811, 770, 772, 709, 63, 289, 765, 376, 791, 957, 0, 280, 151, 257, 770, 560, 553, 734]
,
[308, 466, 611, 140, 190, 538, 839, 956, 677, 785, 478, 394, 465, 292, 638, 157, 144, 280, 0, 813, 843, 809, 627, 30, 680]
,
[385, 842, 168, 267, 271, 994, 722, 896, 899, 682, 240, 336, 681, 850, 312, 372, 400, 151, 813, 0, 515, 762, 609, 363, 112]
,
[987, 61, 238, 874, 526, 866, 127, 132, 311, 938, 873, 124, 455, 449, 162, 646, 56, 257, 843, 515, 0, 39, 544, 842, 240]
,
[880, 878, 975, 358, 353, 964, 776, 766, 241, 467, 681, 882, 339, 900, 263, 668, 470, 770, 809, 762, 39, 0, 990, 822, 464]
,
[299, 327, 792, 266, 771, 821, 710, 259, 834, 827, 553, 97, 233, 278, 329, 488, 327, 560, 627, 609, 544, 990, 0, 791, 170]
,
[168, 751, 495, 384, 402, 383, 286, 199, 366, 206, 545, 217, 551, 913, 770, 967, 83, 553, 30, 363, 842, 822, 791, 0, 303]
,
[737, 136, 732, 722, 808, 591, 458, 288, 368, 431, 386, 936, 408, 345, 692, 671, 227, 734, 680, 112, 240, 464, 170, 303, 0]
        





    ]
    t0=10



    seconds = time.time()
    s=simAnnealing(datos,t0)
    seconds2 = time.time()
    
    print("--------------")
    print("Solucion final: ",s[0])
    print("Longitud de la ruta final: ",s[1])
    print("Microsegundos de búsqueda: ", (seconds2 - seconds)*1000000)

if __name__ == "__main__":
    main()
